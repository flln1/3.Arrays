#include <bits/stdc++.h>
using namespace std;
void brute(vector<int> & arr, int n) {
    vector<int> ls;
    for(int i=0; i<n; i++) {
        if(ls.size()==0 || ls[0]!=arr[i]) {
            int count=0;
            for(int j=0; j<n; j++) {
                if(arr[i]==arr[j]) count++;
            }
            if(count>(n/3)) ls.push_back(arr[i]);
            if(ls.size()==2) break;
        }
    }
    for(auto it:ls) cout << it << " ";
    cout << endl;
}
void better(vector<int> & arr, int n) {
    vector<int> ls;
    map<int, int> mpp;
    for(int i=0; i<n; i++) {
        mpp[arr[i]]++;
    }
    for(int i=0; i<n; i++) {
        if(ls.size()==0 || ls[0]!=arr[i]) if(mpp[arr[i]]>n/3) ls.push_back(arr[i]);
        if(ls.size()==2) break;
    }
    for(auto it:ls) cout << it << " ";
    cout << endl;
}
void optimal(vector<int> & arr, int n) {
    int c1=0, c2=0, ele1=INT_MIN, ele2=INT_MIN;
    for(int i=0; i<n; i++) {
        if(c1==0 && ele2!=arr[i]) {
            ele1=arr[i];
            c1++;
        }
        else if(c2==0 && ele1!=arr[i]) {
            ele2=arr[i];
            c2++;
        }
        else if(ele1==arr[i]) c1++;
        else if(ele2==arr[i]) c2++;
        else {
            c1--;
            c2--;
        }
    }
    cout << ele1 << " " << ele2;
}
int main() {
    vector<int> arr={1,2,2,1,1};
    int n=arr.size(); 
    brute(arr, n);
    better(arr, n);
    optimal(arr, n);
}