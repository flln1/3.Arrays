#include <bits/stdc++.h>
using namespace std;
void brute(vector<int> & arr, int n) {
    set<vector<int>> st;
    for(int i=0; i<n; i++) {
        for(int j=i+1; j<n; j++) {
            for(int k=j+1; k<n; k++) {
                if((arr[i]+arr[j]+arr[k])==0) {
                    vector<int> temp={arr[i], arr[j], arr[k]}; 
                    sort(temp.begin(), temp.end());
                    st.insert(temp);
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    for(auto it:ans) {
        for(auto ele:it) cout << ele << " ";
        cout << endl;
    }
    cout << endl;
}
void better(vector<int> & arr, int n) {
    set<vector<int>> st;
    for(int i=0; i<n; i++) {
        set<int> hashSet;
        for(int j=i+1; j<n; j++) {
            int third= -(arr[i]+arr[j]);
            if(hashSet.find(third)!=hashSet.end()) {
                vector<int> temp={arr[i], arr[j], third}; 
                sort(temp.begin(), temp.end());
                st.insert(temp);
            }
            hashSet.insert(arr[j]);
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    for(auto it:ans) {
        for(auto ele:it) cout << ele << " ";
        cout << endl;
    }
    cout << endl;
}
void optimal(vector<int> & arr, int n) {
    vector<vector<int>> ans;
    sort(arr.begin(), arr.end());
    for(int i=0; i<n; i++) {
        if(arr[i]!=0 && arr[i]==arr[i-1]) continue;
        int j=i+1; 
        int k=n-1;
        int sum=0;
        while(j<k) {
            int sum=arr[i]+arr[j]+arr[k];
            if(sum<0) j++;
            else if(sum>0) k--;
            else {
                ans.push_back({arr[i], arr[j], arr[k]});
                j++;
                k--;
            }
        }
    }
    for(auto it:ans) {
        for(auto ele:it) cout << ele << " ";
        cout << endl;
    }
    cout << endl;
}
int main() {
    vector<int> arr={-1, 0, 1, 2, -1, -4};
    int n=arr.size(); 
    brute(arr, n);
    better(arr, n);
    optimal(arr, n);
}