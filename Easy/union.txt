#include <bits/stdc++.h>
using namespace std;
vector<int> brute(int arr1[], int arr2[], int n, int m) {
    set<int> st;
    vector<int> temp;
    for(int i=0; i<n; i++) st.insert(arr1[i]);
    for(int j=0; j<m; j++) st.insert(arr2[j]);
    for(auto& it: st) temp.push_back(it);
    return temp;
}
vector<int> optimal(int arr1[], int arr2[], int n, int m) {
    int i=0;
    int j=0;
    vector<int> temp;
    while (i<n && j<m) {
	    if(arr1[i]<=arr2[j]) {
	        if(temp.size()==0 || temp.back()!=arr1[i]) temp.push_back(arr1[i]);
    	    i++;
	    }
	    else {
	        if(temp.size()==0 || temp.back()!=arr2[j]) temp.push_back(arr2[j]);
	        j++;	
	    }
    }
    while(i<n) {
	    if(temp.back()!=arr1[i]) temp.push_back(arr1[i]);
	    i++;
    }
    while(j<m) {
	    if(temp.back()!=arr2[j]) temp.push_back(arr2[j]);
	    j++;
    }
    return temp;
}
int main() {
    int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int arr2[] = {2, 3, 4, 4, 5, 11, 12};
    int n=sizeof(arr1)/sizeof(arr1[0]);
    int m=sizeof(arr2)/sizeof(arr2[0]);
    
    vector<int> u1=brute(arr1, arr2, n, m);
    vector<int> u2=optimal(arr1, arr2, n, m);
    for(auto & val:u1) cout << val << " ";
    cout << endl;
    for(auto & val:u2) cout << val << " ";
    return 0;
}
