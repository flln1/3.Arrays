#include <bits/stdc++.h>
using namespace std;
bool ls(vector<int> & arr, int n, int num) {
    for(int i=0; i<n; i++) if(arr[i]==num) return true;
    return false;
}
int brute(vector<int> & arr, int n) {
    int longest=1;
    for(int i=0; i<n; i++) {
        int x=arr[i];
        int count=1;
        while(ls(arr, n, x+1)==true) {
            count+=1;
            x+=1;
        }
        longest=max(longest, count);
    }
    return longest;
}
int better(vector<int> & arr, int n) {
    if(n==0) return 0;
    sort(arr.begin(), arr.end());
    int lastSmaller=INT_MIN;
    int count=0;
    int longest=1;
    for(int i=0; i<n; i++) {
        if(arr[i]-1 == lastSmaller) {
            count+=1;
            lastSmaller=arr[i];
        }
        else if(arr[i]-1 != lastSmaller) {
            count=1;
            lastSmaller=arr[i];
        }
        longest=max(longest, count);
    }
    return longest;
}
int optimal(vector<int> & arr, int n) {
    unordered_set<int> st;
    int longest=1;
    for(int i=0; i<n; i++) {
        st.insert(arr[i]);
    }
    for(auto it: st) {
        int x=it;
        int count=1;
        while(st.find(x+1)!=st.end()) {
            x+=1;
            count+=1;
        }
        longest=max(longest, count);
    }
    return longest;
}
int main() {
    vector<int> arr={1,4,10,12,3,13,11};
    int n=arr.size();
    cout << brute(arr, n) << endl;
    cout << better(arr, n)<< endl;
    cout << optimal(arr, n);
    return 0;
}
