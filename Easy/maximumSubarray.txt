#include <bits/stdc++.h>
using namespace std;
int brute(int arr[], int n, int k) {
    int maxLen=0;
    for(int i=0; i<n; i++) {
        int sum=0;
        for(int j=i; j<n; j++) {
            sum+=arr[j];
            if(sum==k) maxLen=max(maxLen, j-i+1);
        }
    }
    return maxLen;
}
int optimal(int arr[], int n, int k) {
    // unordered_map 'um' implemented 
    // as hash table
    unordered_map<int, int> um;
    int sum = 0, maxLen = 0;
 
    // traverse the given array
    for (int i = 0; i < n; i++) {
 
        // accumulate sum
        sum += arr[i];
 
        // when subarray starts from index '0'
        if (sum == k)
            maxLen = i + 1;
 
        // make an entry for 'sum' if it is
        // not present in 'um'
        if (um.find(sum) == um.end())
            um[sum] = i;
 
        // check if 'sum-k' is present in 'um'
        // or not
        if (um.find(sum - k) != um.end()) {
 
            // update maxLength
            if (maxLen < (i - um[sum - k]))
                maxLen = i - um[sum - k];
        }
    }
    return maxLen;
}
int main() {
    int arr[]={2,3,5,1,9};
    int n=sizeof(arr)/sizeof(arr[0]);
    int target=10;
    cout << brute(arr, n, target) << endl;
    cout << optimal(arr, n, target);
    return 0;
}
