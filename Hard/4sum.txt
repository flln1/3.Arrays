#include <bits/stdc++.h>
using namespace std;
void brute(vector<int> & arr, int n, int num) {
    set<vector<int>> st;
    for(int i=0; i<n; i++) {
        for(int j=i+1; j<n; j++) {
            for(int k=j+1; k<n; k++) {
                for(int l=k+1; l<n; l++) {
                    long long sum=arr[i]+arr[j];
                    sum+=arr[k];
                    sum+=arr[l];
                    if(sum==num) {
                        vector<int> temp={arr[i], arr[j], arr[k], arr[l]}; 
                        sort(temp.begin(), temp.end());
                        st.insert(temp);
                    }
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    for(auto it:ans) {
        for(auto ele:it) cout << ele << " ";
        cout << endl;
    }
    cout << endl;
}
void better(vector<int> & arr, int n, int num) {
    set<vector<int>> st;
    for(int i=0; i<n; i++) {
        for(int j=i+1; j<n; j++) {
            set<int> hashSet;
            for(int k=j+1; k<n; k++) {
                int sum=arr[i]+arr[j];
                sum+=arr[k];
                int fourth= num-sum;
                if(hashSet.find(fourth)!=hashSet.end()) {
                    vector<int> temp={arr[i], arr[j], arr[k], fourth}; 
                    sort(temp.begin(), temp.end());
                    st.insert(temp);
                }
                hashSet.insert(arr[k]);
            }
        }
    }
    vector<vector<int>> ans(st.begin(), st.end());
    for(auto it:ans) {
        for(auto ele:it) cout << ele << " ";
        cout << endl;
    }
    cout << endl;
}
void optimal(vector<int> & arr, int n, int num) {
    vector<vector<int>> ans;
    sort(arr.begin(), arr.end());
    for(int i=0; i<n; i++) {
        if(i>0 && arr[i]==arr[i-1]) continue;
        for(int j=i+1; j<n; j++) {
            if(j>i+1 && arr[j]==arr[j-1]) continue;
            int k=j+1; 
            int l=n-1;
            int sum=0;
            while(k<l) {
                int sum=arr[i];
                sum+=arr[j];
                sum+=arr[k];
                sum+=arr[l];
                if(sum==num) {
                    ans.push_back({arr[i], arr[j], arr[k], arr[l]});
                    k++;
                    l--;
                    while(k<l && arr[k]==arr[k-1]) k++;
                    while(k<l && arr[l]==arr[l+1]) l--;
                }
                else if(sum<num) k++;
                else l--; 
            }
        }
    }
    for(auto it:ans) {
        for(auto ele:it) cout << ele << " ";
        cout << endl;
    }
    cout << endl;
}
int main() {
    vector<int> arr={4, 3, 3, 4, 4, 2, 1, 2, 1, 1};
    int n=arr.size(); 
    int num=9;
    brute(arr, n, num);
    better(arr, n, num);
    optimal(arr, n, num);
}